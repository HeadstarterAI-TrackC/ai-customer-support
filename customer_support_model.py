# -*- coding: utf-8 -*-
"""customer_support_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XdKVaYWo-b1YLG3NMfRjhOqokQjq-fUJ
"""

# Load needed packages and access token (token = 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)
!pip install torch torchvision torchaudio transformers tensorflow accelerate faiss-cpu safetensors sentence-transformers huggingface_hub datasets --index-url https://download.pytorch.org/whl/cu118 --upgrade
!pip install langchain langchain-community openai tiktoken pinecone-client langchain_pinecone unstructured pdfminer==20191125 pdfminer.six==20221105 pillow_heif unstructured_inference youtube-transcript-api pytube sentence-transformer
!pip install --upgrade transformers # If working with GPU accelerator, change faiss-cpu to faiss-gpu

!huggingface-cli login

# Import model into journal as pipeline
import transformers
import torch

model_id = "meta-llama/Meta-Llama-3.1-8B-Instruct"

pipeline = transformers.pipeline(
    "text-generation",
    model=model_id,
    model_kwargs={"torch_dtype": torch.bfloat16},
    device_map="auto",
)

messages = [
    {"role": "system", "content": "You are a pirate chatbot who always responds in pirate speak!"},
    {"role": "user", "content": "Who are you?"},
]

outputs = pipeline(
    messages,
    max_new_tokens=256,
)
print(outputs[0]["generated_text"][-1])

# Setting up RAG system
# from datasets import load_dataset
# from sentence_transformers import SentenceTransformer
# from langchain.vectorstores import FAISS

# ds = load_dataset("bitext/Bitext-customer-support-llm-chatbot-training-dataset")
# dataset = ds['train'].to_pandas()
# texts = dataset['instruction'].tolist()
# embedder = SentenceTransformer("all-MiniLM-L6-v2")

# embeddings = embedder.encode(texts) # Embed sentences in dataset
# vector_store = FAISS.from_embeddings(texts, embeddings) # Create vector store

# dataset